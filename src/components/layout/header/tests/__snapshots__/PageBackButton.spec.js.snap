// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | header | PageBackButton should match snapshot with custom props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawPageBackButton
    className="testable-component"
    disabled={true}
    history={
      Object {
        "goBack": [MockFunction],
      }
    }
    theme="purple"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <button
        className="no-border no-background no-outline"
        disabled={true}
        id="history-back-button"
        onClick={[MockFunction]}
        type="button"
      >
        <span
          aria-hidden={true}
          className="icon-legacy-previous"
          title=""
        />
      </button>,
      "className": "pc-theme-purple is-absolute ml12 testable-component",
      "style": Object {
        "left": 0,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <span
          aria-hidden={true}
          className="icon-legacy-previous"
          title=""
        />,
        "className": "no-border no-background no-outline",
        "disabled": true,
        "id": "history-back-button",
        "onClick": [MockFunction],
        "type": "button",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-hidden": true,
          "className": "icon-legacy-previous",
          "title": "",
        },
        "ref": null,
        "rendered": null,
        "type": "span",
      },
      "type": "button",
    },
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <button
          className="no-border no-background no-outline"
          disabled={true}
          id="history-back-button"
          onClick={[MockFunction]}
          type="button"
        >
          <span
            aria-hidden={true}
            className="icon-legacy-previous"
            title=""
          />
        </button>,
        "className": "pc-theme-purple is-absolute ml12 testable-component",
        "style": Object {
          "left": 0,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <span
            aria-hidden={true}
            className="icon-legacy-previous"
            title=""
          />,
          "className": "no-border no-background no-outline",
          "disabled": true,
          "id": "history-back-button",
          "onClick": [MockFunction],
          "type": "button",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-hidden": true,
            "className": "icon-legacy-previous",
            "title": "",
          },
          "ref": null,
          "rendered": null,
          "type": "span",
        },
        "type": "button",
      },
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`src | components | layout | header | PageBackButton should match snapshot with default props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawPageBackButton
    className=""
    disabled={false}
    history={
      Object {
        "goBack": [MockFunction],
      }
    }
    theme="red"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <button
        className="no-border no-background no-outline"
        disabled={false}
        id="history-back-button"
        onClick={[MockFunction]}
        type="button"
      >
        <span
          aria-hidden={true}
          className="icon-legacy-previous"
          title=""
        />
      </button>,
      "className": "pc-theme-red is-absolute ml12 ",
      "style": Object {
        "left": 0,
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <span
          aria-hidden={true}
          className="icon-legacy-previous"
          title=""
        />,
        "className": "no-border no-background no-outline",
        "disabled": false,
        "id": "history-back-button",
        "onClick": [MockFunction],
        "type": "button",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-hidden": true,
          "className": "icon-legacy-previous",
          "title": "",
        },
        "ref": null,
        "rendered": null,
        "type": "span",
      },
      "type": "button",
    },
    "type": "span",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <button
          className="no-border no-background no-outline"
          disabled={false}
          id="history-back-button"
          onClick={[MockFunction]}
          type="button"
        >
          <span
            aria-hidden={true}
            className="icon-legacy-previous"
            title=""
          />
        </button>,
        "className": "pc-theme-red is-absolute ml12 ",
        "style": Object {
          "left": 0,
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <span
            aria-hidden={true}
            className="icon-legacy-previous"
            title=""
          />,
          "className": "no-border no-background no-outline",
          "disabled": false,
          "id": "history-back-button",
          "onClick": [MockFunction],
          "type": "button",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-hidden": true,
            "className": "icon-legacy-previous",
            "title": "",
          },
          "ref": null,
          "rendered": null,
          "type": "span",
        },
        "type": "button",
      },
      "type": "span",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
