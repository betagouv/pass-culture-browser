// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components | VersoContentOffer should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <VersoContentOffer
    bookables={Array []}
    booking={null}
    distance="1"
    handleRequestMusicAndShowTypes={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    isCancelled={true}
    isNotBookable={false}
    maxShownDates={7}
    offer={
      Object {
        "description": "fake description",
        "id": "X9",
        "isEvent": true,
        "isThing": false,
        "offerType": Object {
          "appLabel": "Presse — Abonnements",
        },
        "product": Object {
          "description": "fake description do not use",
        },
        "productId": "QE",
        "venue": Object {
          "address": "72 rue Carnot",
          "city": "ROMAINVILLE",
          "id": "A9",
          "latitude": 2.44072,
          "longitude": 48.88381,
          "name": "fake name",
          "postalCode": "93230",
          "publicName": "fake publicName",
        },
      }
    }
    style="Rap / Contenders"
    userGeolocation={
      Object {
        "latitude": null,
        "longitude": null,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        <React.Fragment>
          <h3>
            Quoi ?
          </h3>
          <div>
            <span
              className="is-bold"
              id="verso-offer-label"
            >
              Presse — Abonnements
            </span>
          </div>
          <div>
            Genre : Rap / Contenders
          </div>
          <UNDEFINED
            label="Vous pouvez réserver deux places."
            offerId="X9"
          />
        </React.Fragment>,
        <React.Fragment>
          <h3>
            Et en détails ?
          </h3>
          <pre
            className="is-raw-description"
            id="verso-offer-description"
          >
            fake description
          </pre>
        </React.Fragment>,
        <React.Fragment>
          <h3>
            Quand ?
          </h3>
          <ul
            className="dates-info"
          >
            <React.Fragment />
          </ul>
        </React.Fragment>,
        <React.Fragment>
          <div
            className="flex-columns flex-between"
          >
            <h3>
              Où ?
            </h3>
            <span
              className="vco-distance"
            >
              <Icon
                alt=""
                className="vco-geolocation-icon"
                svg="ico-geoloc"
              />
              <span>
                À 1
              </span>
            </span>
          </div>
          <address>
            fake publicName
            <br />
            <React.Fragment>
              72 rue Carnot
              <br />
            </React.Fragment>
            <React.Fragment>
              93230
              <br />
            </React.Fragment>
            <React.Fragment>
              ROMAINVILLE
              <br />
            </React.Fragment>
          </address>
          <a
            className="vco-itinerary"
            rel="noopener noreferrer"
            target="_blank"
            title="Ouverture de votre gestionnaire de carte dans une nouvelle fenêtre"
          >
            <Icon
              alt=""
              className="vco-geolocation-icon"
              svg="ico-go"
            />
            <span>
              Itinéraire
            </span>
          </a>
        </React.Fragment>,
      ],
      "className": "verso-info",
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <h3>
              Quoi ?
            </h3>,
            <div>
              <span
                className="is-bold"
                id="verso-offer-label"
              >
                Presse — Abonnements
              </span>
            </div>,
            <div>
              Genre : Rap / Contenders
            </div>,
            undefined,
            undefined,
            undefined,
            undefined,
            <UNDEFINED
              label="Vous pouvez réserver deux places."
              offerId="X9"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Quoi ?",
            },
            "ref": null,
            "rendered": "Quoi ?",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <span
                  className="is-bold"
                  id="verso-offer-label"
                >
                  Presse — Abonnements
                </span>,
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Presse — Abonnements",
                  "className": "is-bold",
                  "id": "verso-offer-label",
                },
                "ref": null,
                "rendered": "Presse — Abonnements",
                "type": "span",
              },
              undefined,
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Genre : Rap / Contenders",
            },
            "ref": null,
            "rendered": "Genre : Rap / Contenders",
            "type": "div",
          },
          undefined,
          undefined,
          undefined,
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "label": "Vous pouvez réserver deux places.",
              "offerId": "X9",
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.memo),
              "WrappedComponent": [Function],
              "compare": null,
              "displayName": "Connect(DuoOffer)",
              "type": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
        ],
        "type": Symbol(react.fragment),
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <h3>
              Et en détails ?
            </h3>,
            <pre
              className="is-raw-description"
              id="verso-offer-description"
            >
              fake description
            </pre>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Et en détails ?",
            },
            "ref": null,
            "rendered": "Et en détails ?",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "fake description",
              "className": "is-raw-description",
              "id": "verso-offer-description",
            },
            "ref": null,
            "rendered": "fake description",
            "type": "pre",
          },
        ],
        "type": Symbol(react.fragment),
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <h3>
              Quand ?
            </h3>,
            <ul
              className="dates-info"
            >
              <React.Fragment />
            </ul>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Quand ?",
            },
            "ref": null,
            "rendered": "Quand ?",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <React.Fragment />,
              "className": "dates-info",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  Array [],
                  false,
                ],
              },
              "ref": null,
              "rendered": Array [
                false,
              ],
              "type": Symbol(react.fragment),
            },
            "type": "ul",
          },
        ],
        "type": Symbol(react.fragment),
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <div
              className="flex-columns flex-between"
            >
              <h3>
                Où ?
              </h3>
              <span
                className="vco-distance"
              >
                <Icon
                  alt=""
                  className="vco-geolocation-icon"
                  svg="ico-geoloc"
                />
                <span>
                  À 1
                </span>
              </span>
            </div>,
            <address>
              fake publicName
              <br />
              <React.Fragment>
                72 rue Carnot
                <br />
              </React.Fragment>
              <React.Fragment>
                93230
                <br />
              </React.Fragment>
              <React.Fragment>
                ROMAINVILLE
                <br />
              </React.Fragment>
            </address>,
            <a
              className="vco-itinerary"
              rel="noopener noreferrer"
              target="_blank"
              title="Ouverture de votre gestionnaire de carte dans une nouvelle fenêtre"
            >
              <Icon
                alt=""
                className="vco-geolocation-icon"
                svg="ico-go"
              />
              <span>
                Itinéraire
              </span>
            </a>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h3>
                  Où ?
                </h3>,
                <span
                  className="vco-distance"
                >
                  <Icon
                    alt=""
                    className="vco-geolocation-icon"
                    svg="ico-geoloc"
                  />
                  <span>
                    À 1
                  </span>
                </span>,
              ],
              "className": "flex-columns flex-between",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Où ?",
                },
                "ref": null,
                "rendered": "Où ?",
                "type": "h3",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <Icon
                      alt=""
                      className="vco-geolocation-icon"
                      svg="ico-geoloc"
                    />,
                    <span>
                      À 1
                    </span>,
                  ],
                  "className": "vco-distance",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "alt": "",
                      "className": "vco-geolocation-icon",
                      "svg": "ico-geoloc",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "À 1",
                    },
                    "ref": null,
                    "rendered": "À 1",
                    "type": "span",
                  },
                ],
                "type": "span",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "fake publicName",
                <br />,
                <React.Fragment>
                  72 rue Carnot
                  <br />
                </React.Fragment>,
                <React.Fragment>
                  93230
                  <br />
                </React.Fragment>,
                <React.Fragment>
                  ROMAINVILLE
                  <br />
                </React.Fragment>,
              ],
            },
            "ref": null,
            "rendered": Array [
              "fake publicName",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "72 rue Carnot",
                    <br />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "72 rue Carnot",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                ],
                "type": Symbol(react.fragment),
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "93230",
                    <br />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "93230",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                ],
                "type": Symbol(react.fragment),
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "ROMAINVILLE",
                    <br />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "ROMAINVILLE",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                ],
                "type": Symbol(react.fragment),
              },
            ],
            "type": "address",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Icon
                  alt=""
                  className="vco-geolocation-icon"
                  svg="ico-go"
                />,
                <span>
                  Itinéraire
                </span>,
              ],
              "className": "vco-itinerary",
              "href": undefined,
              "rel": "noopener noreferrer",
              "target": "_blank",
              "title": "Ouverture de votre gestionnaire de carte dans une nouvelle fenêtre",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "alt": "",
                  "className": "vco-geolocation-icon",
                  "svg": "ico-go",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Itinéraire",
                },
                "ref": null,
                "rendered": "Itinéraire",
                "type": "span",
              },
            ],
            "type": "a",
          },
        ],
        "type": Symbol(react.fragment),
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          <React.Fragment>
            <h3>
              Quoi ?
            </h3>
            <div>
              <span
                className="is-bold"
                id="verso-offer-label"
              >
                Presse — Abonnements
              </span>
            </div>
            <div>
              Genre : Rap / Contenders
            </div>
            <UNDEFINED
              label="Vous pouvez réserver deux places."
              offerId="X9"
            />
          </React.Fragment>,
          <React.Fragment>
            <h3>
              Et en détails ?
            </h3>
            <pre
              className="is-raw-description"
              id="verso-offer-description"
            >
              fake description
            </pre>
          </React.Fragment>,
          <React.Fragment>
            <h3>
              Quand ?
            </h3>
            <ul
              className="dates-info"
            >
              <React.Fragment />
            </ul>
          </React.Fragment>,
          <React.Fragment>
            <div
              className="flex-columns flex-between"
            >
              <h3>
                Où ?
              </h3>
              <span
                className="vco-distance"
              >
                <Icon
                  alt=""
                  className="vco-geolocation-icon"
                  svg="ico-geoloc"
                />
                <span>
                  À 1
                </span>
              </span>
            </div>
            <address>
              fake publicName
              <br />
              <React.Fragment>
                72 rue Carnot
                <br />
              </React.Fragment>
              <React.Fragment>
                93230
                <br />
              </React.Fragment>
              <React.Fragment>
                ROMAINVILLE
                <br />
              </React.Fragment>
            </address>
            <a
              className="vco-itinerary"
              rel="noopener noreferrer"
              target="_blank"
              title="Ouverture de votre gestionnaire de carte dans une nouvelle fenêtre"
            >
              <Icon
                alt=""
                className="vco-geolocation-icon"
                svg="ico-go"
              />
              <span>
                Itinéraire
              </span>
            </a>
          </React.Fragment>,
        ],
        "className": "verso-info",
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <h3>
                Quoi ?
              </h3>,
              <div>
                <span
                  className="is-bold"
                  id="verso-offer-label"
                >
                  Presse — Abonnements
                </span>
              </div>,
              <div>
                Genre : Rap / Contenders
              </div>,
              undefined,
              undefined,
              undefined,
              undefined,
              <UNDEFINED
                label="Vous pouvez réserver deux places."
                offerId="X9"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Quoi ?",
              },
              "ref": null,
              "rendered": "Quoi ?",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <span
                    className="is-bold"
                    id="verso-offer-label"
                  >
                    Presse — Abonnements
                  </span>,
                  undefined,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Presse — Abonnements",
                    "className": "is-bold",
                    "id": "verso-offer-label",
                  },
                  "ref": null,
                  "rendered": "Presse — Abonnements",
                  "type": "span",
                },
                undefined,
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Genre : Rap / Contenders",
              },
              "ref": null,
              "rendered": "Genre : Rap / Contenders",
              "type": "div",
            },
            undefined,
            undefined,
            undefined,
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "label": "Vous pouvez réserver deux places.",
                "offerId": "X9",
              },
              "ref": null,
              "rendered": null,
              "type": Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": [Function],
                "compare": null,
                "displayName": "Connect(DuoOffer)",
                "type": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
          ],
          "type": Symbol(react.fragment),
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <h3>
                Et en détails ?
              </h3>,
              <pre
                className="is-raw-description"
                id="verso-offer-description"
              >
                fake description
              </pre>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Et en détails ?",
              },
              "ref": null,
              "rendered": "Et en détails ?",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "fake description",
                "className": "is-raw-description",
                "id": "verso-offer-description",
              },
              "ref": null,
              "rendered": "fake description",
              "type": "pre",
            },
          ],
          "type": Symbol(react.fragment),
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <h3>
                Quand ?
              </h3>,
              <ul
                className="dates-info"
              >
                <React.Fragment />
              </ul>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Quand ?",
              },
              "ref": null,
              "rendered": "Quand ?",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <React.Fragment />,
                "className": "dates-info",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    Array [],
                    false,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  false,
                ],
                "type": Symbol(react.fragment),
              },
              "type": "ul",
            },
          ],
          "type": Symbol(react.fragment),
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <div
                className="flex-columns flex-between"
              >
                <h3>
                  Où ?
                </h3>
                <span
                  className="vco-distance"
                >
                  <Icon
                    alt=""
                    className="vco-geolocation-icon"
                    svg="ico-geoloc"
                  />
                  <span>
                    À 1
                  </span>
                </span>
              </div>,
              <address>
                fake publicName
                <br />
                <React.Fragment>
                  72 rue Carnot
                  <br />
                </React.Fragment>
                <React.Fragment>
                  93230
                  <br />
                </React.Fragment>
                <React.Fragment>
                  ROMAINVILLE
                  <br />
                </React.Fragment>
              </address>,
              <a
                className="vco-itinerary"
                rel="noopener noreferrer"
                target="_blank"
                title="Ouverture de votre gestionnaire de carte dans une nouvelle fenêtre"
              >
                <Icon
                  alt=""
                  className="vco-geolocation-icon"
                  svg="ico-go"
                />
                <span>
                  Itinéraire
                </span>
              </a>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h3>
                    Où ?
                  </h3>,
                  <span
                    className="vco-distance"
                  >
                    <Icon
                      alt=""
                      className="vco-geolocation-icon"
                      svg="ico-geoloc"
                    />
                    <span>
                      À 1
                    </span>
                  </span>,
                ],
                "className": "flex-columns flex-between",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Où ?",
                  },
                  "ref": null,
                  "rendered": "Où ?",
                  "type": "h3",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <Icon
                        alt=""
                        className="vco-geolocation-icon"
                        svg="ico-geoloc"
                      />,
                      <span>
                        À 1
                      </span>,
                    ],
                    "className": "vco-distance",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "function",
                      "props": Object {
                        "alt": "",
                        "className": "vco-geolocation-icon",
                        "svg": "ico-geoloc",
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "À 1",
                      },
                      "ref": null,
                      "rendered": "À 1",
                      "type": "span",
                    },
                  ],
                  "type": "span",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "fake publicName",
                  <br />,
                  <React.Fragment>
                    72 rue Carnot
                    <br />
                  </React.Fragment>,
                  <React.Fragment>
                    93230
                    <br />
                  </React.Fragment>,
                  <React.Fragment>
                    ROMAINVILLE
                    <br />
                  </React.Fragment>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "fake publicName",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {},
                  "ref": null,
                  "rendered": null,
                  "type": "br",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "72 rue Carnot",
                      <br />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    "72 rue Carnot",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "br",
                    },
                  ],
                  "type": Symbol(react.fragment),
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "93230",
                      <br />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    "93230",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "br",
                    },
                  ],
                  "type": Symbol(react.fragment),
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "ROMAINVILLE",
                      <br />,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    "ROMAINVILLE",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "br",
                    },
                  ],
                  "type": Symbol(react.fragment),
                },
              ],
              "type": "address",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Icon
                    alt=""
                    className="vco-geolocation-icon"
                    svg="ico-go"
                  />,
                  <span>
                    Itinéraire
                  </span>,
                ],
                "className": "vco-itinerary",
                "href": undefined,
                "rel": "noopener noreferrer",
                "target": "_blank",
                "title": "Ouverture de votre gestionnaire de carte dans une nouvelle fenêtre",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "alt": "",
                    "className": "vco-geolocation-icon",
                    "svg": "ico-go",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Itinéraire",
                  },
                  "ref": null,
                  "rendered": "Itinéraire",
                  "type": "span",
                },
              ],
              "type": "a",
            },
          ],
          "type": Symbol(react.fragment),
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
