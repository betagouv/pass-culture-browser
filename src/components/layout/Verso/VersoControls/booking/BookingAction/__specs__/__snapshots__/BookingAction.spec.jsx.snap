// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | Verso | VersoControls | booking | BookingAction | BookingAction when the offer is bookable should render a price and label within link 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BookingAction
    bookingUrl="http://booking-layout.com"
    history={
      Object {
        "push": [MockFunction],
      }
    }
    isNotBookable={false}
    priceRange={
      Array [
        10,
        30,
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Price
          className="ticket-price"
          free="Gratuit"
          value={
            Array [
              10,
              30,
            ]
          }
        />,
        <span
          className="ticket-label"
        >
          J’y vais !
        </span>,
      ],
      "className": "ticket-action",
      "disabled": false,
      "onClick": [Function],
      "type": "button",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "ticket-price",
          "free": "Gratuit",
          "value": Array [
            10,
            30,
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "J’y vais !",
          "className": "ticket-label",
        },
        "ref": null,
        "rendered": "J’y vais !",
        "type": "span",
      },
    ],
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Price
            className="ticket-price"
            free="Gratuit"
            value={
              Array [
                10,
                30,
              ]
            }
          />,
          <span
            className="ticket-label"
          >
            J’y vais !
          </span>,
        ],
        "className": "ticket-action",
        "disabled": false,
        "onClick": [Function],
        "type": "button",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "ticket-price",
            "free": "Gratuit",
            "value": Array [
              10,
              30,
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "J’y vais !",
            "className": "ticket-label",
          },
          "ref": null,
          "rendered": "J’y vais !",
          "type": "span",
        },
      ],
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`src | components | layout | Verso | VersoControls | booking | BookingAction | BookingAction when the offer is not bookable should render a price and label within a wrapper 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BookingAction
    bookingUrl="http://booking-layout.com"
    history={
      Object {
        "push": [MockFunction],
      }
    }
    isNotBookable={true}
    priceRange={
      Array [
        10,
        30,
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Price
          className="ticket-price"
          free="Gratuit"
          value={
            Array [
              10,
              30,
            ]
          }
        />,
        <span
          className="ticket-label"
        >
          J’y vais !
        </span>,
      ],
      "className": "ticket-action",
      "disabled": true,
      "onClick": [Function],
      "type": "button",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "ticket-price",
          "free": "Gratuit",
          "value": Array [
            10,
            30,
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "J’y vais !",
          "className": "ticket-label",
        },
        "ref": null,
        "rendered": "J’y vais !",
        "type": "span",
      },
    ],
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Price
            className="ticket-price"
            free="Gratuit"
            value={
              Array [
                10,
                30,
              ]
            }
          />,
          <span
            className="ticket-label"
          >
            J’y vais !
          </span>,
        ],
        "className": "ticket-action",
        "disabled": true,
        "onClick": [Function],
        "type": "button",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "ticket-price",
            "free": "Gratuit",
            "value": Array [
              10,
              30,
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "J’y vais !",
            "className": "ticket-label",
          },
          "ref": null,
          "rendered": "J’y vais !",
          "type": "span",
        },
      ],
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
