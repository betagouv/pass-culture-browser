// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | Booking should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Booking
    bookables={Array []}
    booking={
      Object {
        "stock": Object {
          "price": 10,
        },
      }
    }
    extraClassName={null}
    handleSubmit={[MockFunction]}
    history={
      Object {
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    isCancelled={false}
    isEvent={false}
    match={
      Object {
        "params": Object {
          "booking": "reservations",
          "confirmation": "toto",
          "offerId": "AAA",
        },
        "url": "/foo/reservation/AE",
      }
    }
    offer={
      Object {
        "isEvent": true,
        "name": "super offer",
        "venue": Object {
          "name": "super venue",
        },
      }
    }
    recommendation={
      Object {
        "id": "AE",
      }
    }
    trackBookingSuccess={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "appear": false,
      "children": [Function],
      "enter": true,
      "exit": true,
      "in": true,
      "mountOnEnter": false,
      "onEnter": [Function],
      "onEntered": [Function],
      "onEntering": [Function],
      "onExit": [Function],
      "onExited": [Function],
      "onExiting": [Function],
      "timeout": 0,
      "unmountOnExit": false,
    },
    "ref": null,
    "rendered": [Function],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "appear": false,
        "children": [Function],
        "enter": true,
        "exit": true,
        "in": true,
        "mountOnEnter": false,
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "timeout": 0,
        "unmountOnExit": false,
      },
      "ref": null,
      "rendered": [Function],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`src | components | layout |Booking should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Booking
    bookables={Array []}
    booking={
      Object {
        "stock": Object {
          "price": 10,
        },
      }
    }
    extraClassName={null}
    handleSubmit={[MockFunction]}
    history={
      Object {
        "push": [MockFunction],
        "replace": [MockFunction],
      }
    }
    isCancelled={false}
    isEvent={false}
    match={
      Object {
        "params": Object {
          "booking": "reservations",
          "confirmation": "toto",
          "offerId": "AAA",
        },
        "url": "/foo/reservation/AE",
      }
    }
    offer={
      Object {
        "isEvent": true,
        "name": "super offer",
        "venue": Object {
          "name": "super venue",
        },
      }
    }
    recommendation={
      Object {
        "id": "AE",
      }
    }
    trackBookingSuccess={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "appear": false,
      "children": [Function],
      "enter": true,
      "exit": true,
      "in": true,
      "mountOnEnter": false,
      "onEnter": [Function],
      "onEntered": [Function],
      "onEntering": [Function],
      "onExit": [Function],
      "onExited": [Function],
      "onExiting": [Function],
      "timeout": 0,
      "unmountOnExit": false,
    },
    "ref": null,
    "rendered": [Function],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "appear": false,
        "children": [Function],
        "enter": true,
        "exit": true,
        "in": true,
        "mountOnEnter": false,
        "onEnter": [Function],
        "onEntered": [Function],
        "onEntering": [Function],
        "onExit": [Function],
        "onExited": [Function],
        "onExiting": [Function],
        "timeout": 0,
        "unmountOnExit": false,
      },
      "ref": null,
      "rendered": [Function],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
