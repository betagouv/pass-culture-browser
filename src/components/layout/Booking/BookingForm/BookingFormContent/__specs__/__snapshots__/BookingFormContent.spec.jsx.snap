// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | layout | Booking | BookingForm | BookingFormContent should match snapshot when booking a duo event 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BookingFormContent
    extraClassName="fake className"
    formId="fake formId"
    handleSubmit={[MockFunction]}
    invalid={false}
    isEvent={true}
    isReadOnly={false}
    isStockDuo={true}
    offerId="o1"
    onChange={[MockFunction]}
    values={
      Object {
        "bookables": Array [
          Object {
            "id": "B1",
          },
        ],
        "date": "21/10/2001",
        "price": 5,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <React.Fragment>
          <Field
            name="date"
            render={[Function]}
          />
          <div
            className="isDuo"
          >
            <CheckBoxField
              name="isDuo"
              required={false}
            >
              <UNDEFINED
                label="Réserver 2 places"
                offerId="o1"
              />
            </CheckBoxField>
          </div>
        </React.Fragment>,
        false,
      ],
      "className": "fake className ",
      "id": "fake formId",
      "onSubmit": [MockFunction],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Field
              name="date"
              render={[Function]}
            />,
            false,
            <div
              className="isDuo"
            >
              <CheckBoxField
                name="isDuo"
                required={false}
              >
                <UNDEFINED
                  label="Réserver 2 places"
                  offerId="o1"
                />
              </CheckBoxField>
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "name": "date",
              "render": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <CheckBoxField
                name="isDuo"
                required={false}
              >
                <UNDEFINED
                  label="Réserver 2 places"
                  offerId="o1"
                />
              </CheckBoxField>,
              "className": "isDuo",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <UNDEFINED
                  label="Réserver 2 places"
                  offerId="o1"
                />,
                "name": "isDuo",
                "required": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "label": "Réserver 2 places",
                  "offerId": "o1",
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.memo),
                  "WrappedComponent": [Function],
                  "compare": null,
                  "displayName": "Connect(DuoOffer)",
                  "type": [Function],
                  Symbol(Symbol.hasInstance): [Function],
                },
              },
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": Symbol(react.fragment),
      },
      false,
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <React.Fragment>
            <Field
              name="date"
              render={[Function]}
            />
            <div
              className="isDuo"
            >
              <CheckBoxField
                name="isDuo"
                required={false}
              >
                <UNDEFINED
                  label="Réserver 2 places"
                  offerId="o1"
                />
              </CheckBoxField>
            </div>
          </React.Fragment>,
          false,
        ],
        "className": "fake className ",
        "id": "fake formId",
        "onSubmit": [MockFunction],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Field
                name="date"
                render={[Function]}
              />,
              false,
              <div
                className="isDuo"
              >
                <CheckBoxField
                  name="isDuo"
                  required={false}
                >
                  <UNDEFINED
                    label="Réserver 2 places"
                    offerId="o1"
                  />
                </CheckBoxField>
              </div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "name": "date",
                "render": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <CheckBoxField
                  name="isDuo"
                  required={false}
                >
                  <UNDEFINED
                    label="Réserver 2 places"
                    offerId="o1"
                  />
                </CheckBoxField>,
                "className": "isDuo",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <UNDEFINED
                    label="Réserver 2 places"
                    offerId="o1"
                  />,
                  "name": "isDuo",
                  "required": false,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "label": "Réserver 2 places",
                    "offerId": "o1",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.memo),
                    "WrappedComponent": [Function],
                    "compare": null,
                    "displayName": "Connect(DuoOffer)",
                    "type": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  },
                },
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": Symbol(react.fragment),
        },
        false,
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`src | components | layout | Booking | BookingForm | BookingFormContent should match snapshot when booking a thing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BookingFormContent
    extraClassName="fake className"
    formId="fake formId"
    handleSubmit={[MockFunction]}
    invalid={false}
    isEvent={false}
    isReadOnly={false}
    isStockDuo={false}
    offerId="o1"
    onChange={[MockFunction]}
    values={
      Object {
        "bookables": Array [],
        "date": null,
        "price": null,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        false,
        <p
          className="text-center fs22"
        >
          <span
            className="is-block"
          >
            Vous êtes sur le point de réserver
          </span>
          <span
            className="is-block"
          >
            cette offre pour 0 €.
          </span>
        </p>,
      ],
      "className": "fake className ",
      "id": "fake formId",
      "onSubmit": [MockFunction],
    },
    "ref": null,
    "rendered": Array [
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="is-block"
            >
              Vous êtes sur le point de réserver
            </span>,
            <span
              className="is-block"
            >
              cette offre pour 0 €.
            </span>,
          ],
          "className": "text-center fs22",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Vous êtes sur le point de réserver",
              "className": "is-block",
            },
            "ref": null,
            "rendered": "Vous êtes sur le point de réserver",
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "cette offre pour 0 €.",
              "className": "is-block",
            },
            "ref": null,
            "rendered": "cette offre pour 0 €.",
            "type": "span",
          },
        ],
        "type": "p",
      },
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          false,
          <p
            className="text-center fs22"
          >
            <span
              className="is-block"
            >
              Vous êtes sur le point de réserver
            </span>
            <span
              className="is-block"
            >
              cette offre pour 0 €.
            </span>
          </p>,
        ],
        "className": "fake className ",
        "id": "fake formId",
        "onSubmit": [MockFunction],
      },
      "ref": null,
      "rendered": Array [
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <span
                className="is-block"
              >
                Vous êtes sur le point de réserver
              </span>,
              <span
                className="is-block"
              >
                cette offre pour 0 €.
              </span>,
            ],
            "className": "text-center fs22",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Vous êtes sur le point de réserver",
                "className": "is-block",
              },
              "ref": null,
              "rendered": "Vous êtes sur le point de réserver",
              "type": "span",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "cette offre pour 0 €.",
                "className": "is-block",
              },
              "ref": null,
              "rendered": "cette offre pour 0 €.",
              "type": "span",
            },
          ],
          "type": "p",
        },
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`src | components | layout | Booking | BookingForm | BookingFormContent should match snapshot when booking an event 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BookingFormContent
    extraClassName="fake className"
    formId="fake formId"
    handleSubmit={[MockFunction]}
    invalid={false}
    isEvent={true}
    isReadOnly={false}
    isStockDuo={false}
    offerId="o1"
    onChange={[MockFunction]}
    values={
      Object {
        "bookables": Array [
          Object {
            "id": "B1",
          },
        ],
        "date": "21/10/2001",
        "price": 5,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <React.Fragment>
          <Field
            name="date"
            render={[Function]}
          />
        </React.Fragment>,
        false,
      ],
      "className": "fake className ",
      "id": "fake formId",
      "onSubmit": [MockFunction],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Field
              name="date"
              render={[Function]}
            />,
            false,
            false,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "name": "date",
              "render": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
          false,
        ],
        "type": Symbol(react.fragment),
      },
      false,
    ],
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <React.Fragment>
            <Field
              name="date"
              render={[Function]}
            />
          </React.Fragment>,
          false,
        ],
        "className": "fake className ",
        "id": "fake formId",
        "onSubmit": [MockFunction],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Field
                name="date"
                render={[Function]}
              />,
              false,
              false,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "name": "date",
                "render": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
            false,
          ],
          "type": Symbol(react.fragment),
        },
        false,
      ],
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
