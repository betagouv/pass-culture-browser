// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | share | ShareButtonContent snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ShareButtonContent
    dispatch={[MockFunction]}
    email={null}
    id="verso-share-button"
    offerName="Fake offer name"
    text="Fake text"
    url="http://www.fake-url.com"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <span
        aria-hidden={true}
        className="icon-ico-share"
        title="Partager cette offre"
      />,
      "className": "no-border no-background",
      "disabled": false,
      "id": "verso-share-button",
      "onClick": [Function],
      "type": "button",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "aria-hidden": true,
        "className": "icon-ico-share",
        "title": "Partager cette offre",
      },
      "ref": null,
      "rendered": null,
      "type": "span",
    },
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <span
          aria-hidden={true}
          className="icon-ico-share"
          title="Partager cette offre"
        />,
        "className": "no-border no-background",
        "disabled": false,
        "id": "verso-share-button",
        "onClick": [Function],
        "type": "button",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-hidden": true,
          "className": "icon-ico-share",
          "title": "Partager cette offre",
        },
        "ref": null,
        "rendered": null,
        "type": "span",
      },
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`src | components | share | getCloseButton snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <button
    className="no-border no-background no-outline is-block py12 is-bold fs14"
    onClick={[Function]}
    type="button"
  >
    <span>
      Fermer
    </span>
  </button>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": "closeButton",
    "nodeType": "host",
    "props": Object {
      "children": <span>
        Fermer
      </span>,
      "className": "no-border no-background no-outline is-block py12 is-bold fs14",
      "onClick": [Function],
      "type": "button",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "Fermer",
      },
      "ref": null,
      "rendered": "Fermer",
      "type": "span",
    },
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": "closeButton",
      "nodeType": "host",
      "props": Object {
        "children": <span>
          Fermer
        </span>,
        "className": "no-border no-background no-outline is-block py12 is-bold fs14",
        "onClick": [Function],
        "type": "button",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Fermer",
        },
        "ref": null,
        "rendered": "Fermer",
        "type": "span",
      },
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;

exports[`src | components | share | getCopyToClipboardButton snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CopyToClipboardButton
    className="py12 is-bold fs14"
    onClick={[Function]}
    value="http://foo.com"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <button
        className="no-border no-background no-outline is-block py12 is-bold fs14"
        type="button"
      >
        <span>
          Copier le lien
        </span>
      </button>,
      "onCopy": [Function],
      "options": undefined,
      "text": "http://foo.com",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <span>
          Copier le lien
        </span>,
        "className": "no-border no-background no-outline is-block py12 is-bold fs14",
        "type": "button",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Copier le lien",
        },
        "ref": null,
        "rendered": "Copier le lien",
        "type": "span",
      },
      "type": "button",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <button
          className="no-border no-background no-outline is-block py12 is-bold fs14"
          type="button"
        >
          <span>
            Copier le lien
          </span>
        </button>,
        "onCopy": [Function],
        "options": undefined,
        "text": "http://foo.com",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <span>
            Copier le lien
          </span>,
          "className": "no-border no-background no-outline is-block py12 is-bold fs14",
          "type": "button",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Copier le lien",
          },
          "ref": null,
          "rendered": "Copier le lien",
          "type": "span",
        },
        "type": "button",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`src | components | share | getMailToLinkButton snapshot should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MailToLink
    className="no-underline is-block is-white-text py12 is-bold fs14"
    email="foo@bar.com"
    headers={
      Object {
        "subject": "Fake title",
        "url": "http://www.fake-url.com",
      }
    }
    obfuscate={false}
  >
    <span>
      Envoyer par e-mail
    </span>
  </MailToLink>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <span>
        Envoyer par e-mail
      </span>,
      "className": "no-underline is-block is-white-text py12 is-bold fs14",
      "href": "mailto:foo@bar.com?subject=Fake%20title&url=http%3A%2F%2Fwww.fake-url.com",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "Envoyer par e-mail",
      },
      "ref": null,
      "rendered": "Envoyer par e-mail",
      "type": "span",
    },
    "type": "a",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <span>
          Envoyer par e-mail
        </span>,
        "className": "no-underline is-block is-white-text py12 is-bold fs14",
        "href": "mailto:foo@bar.com?subject=Fake%20title&url=http%3A%2F%2Fwww.fake-url.com",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Envoyer par e-mail",
        },
        "ref": null,
        "rendered": "Envoyer par e-mail",
        "type": "span",
      },
      "type": "a",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
