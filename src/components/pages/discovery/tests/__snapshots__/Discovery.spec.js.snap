// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | discovery | Discovery snapshot should match snapshot with required props only 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Discovery
    dispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "config": Object {
                "apiPath": "/recommendations?",
                "body": Object {
                  "readRecommendations": null,
                  "seenRecommendationIds": null,
                },
                "handleFail": [Function],
                "handleSuccess": [Function],
                "method": "PUT",
                "normalizer": Object {
                  "bookings": "bookings",
                },
              },
              "type": "REQUEST_DATA_PUT_/RECOMMENDATIONS?",
            },
          ],
          Array [
            Object {
              "type": "SAVE_RECOMMENDATIONS_REQUEST_TIMESTAMP",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    fromPassword={true}
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
    lastRequestedAt={null}
    location={Object {}}
    match={
      Object {
        "params": Object {
          "view": "verso",
        },
      }
    }
    readRecommendations={null}
    recommendations={null}
    shouldLoadRecommendations={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <main
          className="discovery-page no-padding page with-footer"
          role="main"
        >
          <withRouter(BackButton) />
          <React.Fragment>
            <Route
              path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+)?/:view(booking)/:bookingId?/:view(cancelled)?/:menu(menu)?"
              render={[Function]}
            />
            <Route
              path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+|verso)?/:view(verso|cancelled)?/:bookingId?/:menu(menu)?"
              render={[Function]}
            />
          </React.Fragment>
          <withRouter(Connect(Footer))
            borderTop={true}
            id="deck-footer"
          />
        </main>,
        <withRouter(RawLoader)
          hasError={false}
          isEmpty={null}
          isLoading={true}
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <withRouter(BackButton) />,
            <React.Fragment>
              <Route
                path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+)?/:view(booking)/:bookingId?/:view(cancelled)?/:menu(menu)?"
                render={[Function]}
              />
              <Route
                path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+|verso)?/:view(verso|cancelled)?/:bookingId?/:menu(menu)?"
                render={[Function]}
              />
            </React.Fragment>,
            <withRouter(Connect(Footer))
              borderTop={true}
              id="deck-footer"
            />,
          ],
          "className": "discovery-page no-padding page with-footer",
          "role": "main",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <Route
                  path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+)?/:view(booking)/:bookingId?/:view(cancelled)?/:menu(menu)?"
                  render={[Function]}
                />,
                <Route
                  path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+|verso)?/:view(verso|cancelled)?/:bookingId?/:menu(menu)?"
                  render={[Function]}
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "route-discovery-booking",
                "nodeType": "class",
                "props": Object {
                  "path": "/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+)?/:view(booking)/:bookingId?/:view(cancelled)?/:menu(menu)?",
                  "render": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "route-discovery-deck",
                "nodeType": "class",
                "props": Object {
                  "path": "/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+|verso)?/:view(verso|cancelled)?/:bookingId?/:menu(menu)?",
                  "render": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": Symbol(react.fragment),
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "borderTop": true,
              "id": "deck-footer",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "main",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "hasError": false,
          "isEmpty": null,
          "isLoading": true,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <main
            className="discovery-page no-padding page with-footer"
            role="main"
          >
            <withRouter(BackButton) />
            <React.Fragment>
              <Route
                path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+)?/:view(booking)/:bookingId?/:view(cancelled)?/:menu(menu)?"
                render={[Function]}
              />
              <Route
                path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+|verso)?/:view(verso|cancelled)?/:bookingId?/:menu(menu)?"
                render={[Function]}
              />
            </React.Fragment>
            <withRouter(Connect(Footer))
              borderTop={true}
              id="deck-footer"
            />
          </main>,
          <withRouter(RawLoader)
            hasError={false}
            isEmpty={null}
            isLoading={true}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <withRouter(BackButton) />,
              <React.Fragment>
                <Route
                  path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+)?/:view(booking)/:bookingId?/:view(cancelled)?/:menu(menu)?"
                  render={[Function]}
                />
                <Route
                  path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+|verso)?/:view(verso|cancelled)?/:bookingId?/:menu(menu)?"
                  render={[Function]}
                />
              </React.Fragment>,
              <withRouter(Connect(Footer))
                borderTop={true}
                id="deck-footer"
              />,
            ],
            "className": "discovery-page no-padding page with-footer",
            "role": "main",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <Route
                    path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+)?/:view(booking)/:bookingId?/:view(cancelled)?/:menu(menu)?"
                    render={[Function]}
                  />,
                  <Route
                    path="/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+|verso)?/:view(verso|cancelled)?/:bookingId?/:menu(menu)?"
                    render={[Function]}
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "route-discovery-booking",
                  "nodeType": "class",
                  "props": Object {
                    "path": "/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+)?/:view(booking)/:bookingId?/:view(cancelled)?/:menu(menu)?",
                    "render": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "route-discovery-deck",
                  "nodeType": "class",
                  "props": Object {
                    "path": "/decouverte/:offerId([A-Z0-9]+)/:mediationId([A-Z0-9]+|verso)?/:view(verso|cancelled)?/:bookingId?/:menu(menu)?",
                    "render": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": Symbol(react.fragment),
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "borderTop": true,
                "id": "deck-footer",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "main",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "hasError": false,
            "isEmpty": null,
            "isLoading": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
