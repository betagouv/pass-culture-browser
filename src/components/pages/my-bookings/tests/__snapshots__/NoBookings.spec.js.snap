// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | pages | my-bookings | NoBookings should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NoBookings />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Link
          className="mb-link-offers"
          replace={false}
          to="/decouverte"
        >
          Lancez-vous
        </Link>,
        <p
          className="mb-text"
        >
          Dès que vous aurez réservé une offre,
          <br />
          vous la retrouverez ici.
        </p>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": "Lancez-vous",
          "className": "mb-link-offers",
          "replace": false,
          "to": "/decouverte",
        },
        "ref": null,
        "rendered": "Lancez-vous",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Dès que vous aurez réservé une offre,",
            <br />,
            "vous la retrouverez ici.",
          ],
          "className": "mb-text",
        },
        "ref": null,
        "rendered": Array [
          "Dès que vous aurez réservé une offre,",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          "vous la retrouverez ici.",
        ],
        "type": "p",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Link
            className="mb-link-offers"
            replace={false}
            to="/decouverte"
          >
            Lancez-vous
          </Link>,
          <p
            className="mb-text"
          >
            Dès que vous aurez réservé une offre,
            <br />
            vous la retrouverez ici.
          </p>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Lancez-vous",
            "className": "mb-link-offers",
            "replace": false,
            "to": "/decouverte",
          },
          "ref": null,
          "rendered": "Lancez-vous",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Dès que vous aurez réservé une offre,",
              <br />,
              "vous la retrouverez ici.",
            ],
            "className": "mb-text",
          },
          "ref": null,
          "rendered": Array [
            "Dès que vous aurez réservé une offre,",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            "vous la retrouverez ici.",
          ],
          "type": "p",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
}
`;
