// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`src | components | verso | verso-controls | booking | BookThisLink should match snapshot with required props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <BookThisLink
    linkDestination="/path/to/page/"
    priceValue={
      Array [
        0,
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Price
          className="pc-ticket-button-price flex-columns items-center"
          format={[Function]}
          free="Gratuit"
          value={
            Array [
              0,
            ]
          }
        />,
        <span
          className="pc-ticket-button-label"
        >
          J'y vais!
        </span>,
      ],
      "className": "flex-columns is-bold is-white-text fs18",
      "id": "verso-booking-button",
      "to": "/path/to/page/",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "className": "pc-ticket-button-price flex-columns items-center",
          "format": [Function],
          "free": "Gratuit",
          "value": Array [
            0,
          ],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "J'y vais!",
          "className": "pc-ticket-button-label",
        },
        "ref": null,
        "rendered": "J'y vais!",
        "type": "span",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Price
            className="pc-ticket-button-price flex-columns items-center"
            format={[Function]}
            free="Gratuit"
            value={
              Array [
                0,
              ]
            }
          />,
          <span
            className="pc-ticket-button-label"
          >
            J'y vais!
          </span>,
        ],
        "className": "flex-columns is-bold is-white-text fs18",
        "id": "verso-booking-button",
        "to": "/path/to/page/",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "pc-ticket-button-price flex-columns items-center",
            "format": [Function],
            "free": "Gratuit",
            "value": Array [
              0,
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "J'y vais!",
            "className": "pc-ticket-button-label",
          },
          "ref": null,
          "rendered": "J'y vais!",
          "type": "span",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
